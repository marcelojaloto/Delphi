{******************************************************************************}
{                                                                              }
{  Server REST API Sample with Delphi MVC Framework                            }
{  Copyright (c) 2020 Marcelo Jaloto                                           }
{  https://github.com/marcelojaloto/Delphi/tree/master/samples/server-api-rest }
{                                                                              }
{******************************************************************************}
{                                                                              }
{  Licensed under the Apache License, Version 2.0 (the "License");             }
{  you may not use this file except in compliance with the License.            }
{  You may obtain a copy of the License at                                     }
{                                                                              }
{      http://www.apache.org/licenses/LICENSE-2.0                              }
{                                                                              }
{  Unless required by applicable law or agreed to in writing, software         }
{  distributed under the License is distributed on an "AS IS" BASIS,           }
{  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    }
{  See the License for the specific language governing permissions and         }
{  limitations under the License.                                              }
{                                                                              }
{******************************************************************************}

unit api.model.customers;

interface

uses
  System.JSON,
  System.Generics.Collections,
  MVCFramework.Serializer.Commons,
  MVCFramework.Swagger.Commons,
  MVCFramework.ActiveRecord;

type

  TCustomerBasic = class(TMVCActiveRecord)
  strict private
    [MVCTableField('name')]
    Fname: string;
    [MVCTableField('email')]
    Femail: string;
  public
    [MVCSwagJsonSchemaField(stString, 'name', 'Customer name', True, True)]
    property name: string read Fname write Fname;

    [MVCSwagJsonSchemaField(stString, 'email', 'Customer e-mail', False, True)]
    property email: string read Femail write Femail;
  end;

  [MVCTable('customers')]
  TCustomer = class(TCustomerBasic)
  strict private
    [MVCTableField('id', [foPrimaryKey, foAutoGenerated])]  // não usar o nome da sequence
    Fid: Integer;
  public
    [MVCSwagJsonSchemaField(stString, 'id', 'Customer id', True)]
    property id: Integer read Fid write Fid;
  end;

  TCustomers = class
  public
    class function CheckExist(const pId: Int64; const pRaiseExceptionIfNotFound: Boolean = True): Boolean;
    class procedure Insert(pCustomer: TCustomer);
    class procedure Update(pCustomer: TCustomer);
    class procedure Delete(const pId: Int64);
    class function ReturnCustomer(const pId: Int64): TCustomer;
    class function ReturnCustomersList: TObjectList<TCustomer>;
  end;


implementation

uses
  System.SysUtils,
  api.core.common;

const
  MSG_ERROR_CUSTOMER_NOT_FOUND = 'Customer not found';

{ TCustomers }

class function TCustomers.CheckExist(const pId: Int64; const pRaiseExceptionIfNotFound: Boolean): Boolean;
begin
  // see more RQL support in MVCFramework.RQL.Parser.pas
  Result := (TMVCActiveRecord.Count<TCustomer>('eq(id, ' + pId.ToString + ')') > 0);
  if not Result and pRaiseExceptionIfNotFound then
    raise EMVCActiveRecordNotFound.Create(MSG_ERROR_CUSTOMER_NOT_FOUND);
end;

class procedure TCustomers.Insert(pCustomer: TCustomer);
begin
  pCustomer.Insert;
end;

class procedure TCustomers.Delete(const pId: Int64);
begin
  TCustomers.CheckExist(pId);
  var vCustomer := TCustomer.Create;
  try
    vCustomer.id := pId;
    vCustomer.Delete;
  finally
    vCustomer.Free;
  end;
end;

class function TCustomers.ReturnCustomer(const pId: Int64): TCustomer;
begin
  Result := TMVCActiveRecord.GetByPK<TCustomer>(pId);
end;

class function TCustomers.ReturnCustomersList: TObjectList<TCustomer>;
begin
  Result := TMVCActiveRecord.All<TCustomer>;
end;

class procedure TCustomers.Update(pCustomer: TCustomer);
begin
  TCustomers.CheckExist(pCustomer.id);
  pCustomer.Update;
end;

end.
